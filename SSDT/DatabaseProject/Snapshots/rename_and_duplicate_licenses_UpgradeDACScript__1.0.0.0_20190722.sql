/*
Deployment script for DataMigrationSSD-Remote2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DataMigrationSSD-Remote2"
:setvar DefaultFilePrefix "DataMigrationSSD-Remote2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
if exists(select * from sys.columns where name = 'SlideProofLicenses' and object_id = object_id('ModuleConfigurations'))  
begin
EXEC sp_rename '[ModuleConfigurations].[SlideProofLicenses]', 'ProductivityTools', 'COLUMN';
end

GO

if (SELECT lower(DATA_TYPE)  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ModuleConfigurations' AND COLUMN_NAME = 'moduleLicenses') <> 'int'
begin
ALTER TABLE [ModuleConfigurations] add  [moduleLicenses_tmp] int null;
end

GO

if exists(select * from sys.columns where name = 'moduleLicenses_tmp' and object_id = object_id('ModuleConfigurations'))  
begin
Exec('update [ModuleConfigurations] set [moduleLicenses_tmp] =  CONVERT(INT, [moduleLicenses])')
ALTER TABLE [dbo].[ModuleConfigurations] ALTER COLUMN [moduleLicenses] int null;
Exec('update [ModuleConfigurations] set [moduleLicenses] = [moduleLicenses_tmp]')
ALTER TABLE [ModuleConfigurations] drop  column [moduleLicenses_tmp]  
end


GO

GO
PRINT N'Rename refactoring operation with key d16661e4-4117-4370-8d7a-0d04fd4256d3 is skipped, element [dbo].[ModuleConfigurations].[checkLincences] (SqlSimpleColumn) will not be renamed to CheckLincences';


GO
PRINT N'The following operation was generated from a refactoring log file e6a30131-93bf-4255-9501-da021a80b963';

PRINT N'Rename [dbo].[ModuleConfigurations].[SlideProofLicenses] to ProductivityTools';


GO
EXECUTE sp_rename @objname = N'[dbo].[ModuleConfigurations].[SlideProofLicenses]', @newname = N'ProductivityTools', @objtype = N'COLUMN';


GO
PRINT N'Rename refactoring operation with key 460609d1-6b1e-43d4-a0b2-36c8c4eda0eb is skipped, element [dbo].[ModuleConfigurations].[moduleLicenses] (SqlSimpleColumn) will not be renamed to ModuleLicenses';


GO
PRINT N'Rename refactoring operation with key 3172a80e-35c5-41bb-8736-60b8e2610c52 is skipped, element [dbo].[ModuleConfigurations].[CheckLincences] (SqlSimpleColumn) will not be renamed to CheckLicences';


GO
PRINT N'Altering [dbo].[ModuleConfigurations]...';


GO
ALTER TABLE [dbo].[ModuleConfigurations] ALTER COLUMN [moduleLicenses] INT NULL;


GO
ALTER TABLE [dbo].[ModuleConfigurations]
    ADD [CheckLicences] INT NULL;


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e6a30131-93bf-4255-9501-da021a80b963')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e6a30131-93bf-4255-9501-da021a80b963')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd16661e4-4117-4370-8d7a-0d04fd4256d3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d16661e4-4117-4370-8d7a-0d04fd4256d3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '460609d1-6b1e-43d4-a0b2-36c8c4eda0eb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('460609d1-6b1e-43d4-a0b2-36c8c4eda0eb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3172a80e-35c5-41bb-8736-60b8e2610c52')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3172a80e-35c5-41bb-8736-60b8e2610c52')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

if(select count(*) from [ModuleConfigurations] where CheckLicences  is null)>0
begin
update [ModuleConfigurations] set CheckLicences = ProductivityTools
end
GO

GO
PRINT N'Update complete.';


GO
